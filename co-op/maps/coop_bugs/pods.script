float float_spawnedBugsIndex;

void pods_spawn();

void pods_spawn()
//spawn a bug
{
	entity e,eCaller;
	float fIndex,fScale;
	string sTargetname,sModel;
	
	fScale	= 1;
	sModel	= "char/bug_small-explosive.tik";
	
	float_spawnedBugsIndex++;
	fIndex = float_spawnedBugsIndex;
	
	eCaller = getCurrentEntity();
	
	if(doesEntityExist(eCaller))
	{
	//check if previouse spawed bug is not in the way
		sTargetname = eCaller.getStringVar("lastSpawnedBugTargetname");
		e = getEntity(sTargetname);
		if(globalCoop_check_existingLivingEntity(e))
		{
			if(e.iswithindistanceof(eCaller,100))
			{
				return;
			}
		}
		
		vector vOrigin;
		vOrigin = eCaller.getOrigin();
		vOrigin_z += 14;
		
		if(vectorgety(eCaller.getAngles()) == 270)
		{
			vOrigin_y -= 40;
		}
		else if(vectorgety(eCaller.getAngles()) == 90)
		{
			vOrigin_y += 40;
		}
		
		if(randomint(99) > 48)
		{
			//sModel	= "char/bug_female-nosack.tik";
			sModel	= "char/bug_male.tik";
			fScale	= 0.4;
		}
		
		eCaller.setStringVar("lastSpawnedBugTargetname","spawnedBug"+fIndex);
		e = spawn(sModel,"notsolid","1","ai_off","1","hide","1","origin",""+vOrigin);
		globalCoop_main_waitAFrame();
		e.targetname("spawnedBug"+fIndex);
		e.angle(vectorgety(eCaller.getAngles()));
		e.allowfall(1);
		//e.archetype(""); //reenabled on 2018.03.22
		e.setsize('-14 -14 0','14 14 34');
		e.solid();
		e.scale(fScale);
		e.ai_on();
		if(!cvar_bool_multiplayer){
			e.health(2);
		}
		else{
			e.health(globalCoop_return_floatMultiplicatedPlayerQuantity(2));
		}
		globalCoop_main_waitAFrame();
		e.show();
	}
}
