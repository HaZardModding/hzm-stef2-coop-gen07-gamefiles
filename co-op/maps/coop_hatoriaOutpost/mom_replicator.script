//This script contains the code for the replicator1, use as you please
//This script contains the code for the replicator1, use as you please
//This script contains the code for the replicator1, use as you please


//Global Variables, can be accessed by all Functions/scriptfiles
//if definied outside a function, just like this
////////////////////////////////////////////////////////////////////////////////
float	float_replicating1,
		float_pickup1,
		float_scale_item1,
		float_offset_item1;
string	string_class_item1,
		string_model_item1;
		
float	float_replicating2,
		float_pickup2,
		float_scale_item2,
		float_offset_item2;
string	string_class_item2,
		string_model_item2;

//declaration
////////////////////////////////////////////////////////////////////////////////
void	replicator1();
void	replicator1_One();
void	replicator1_Two();
void	replicator1_Three();
void	replicator1_Four();
void	replicator1_Five();
void	replicator1_Six();
void	replicator1_Seven();
void	replicator1_Eight();
void	replicator1_Nine();
void	replicator1_Zero();
void	replicator1_Ten();
void	replicator1_Eleven();
void	replicator1_Twelve();
void	replicator1_Thirteen();
void	replicator1_Fourteen();
void	replicator1_Fifteen();
void	replicator1_pickup(entity ePlayer);
void	replicator2();
void	replicator2_One();
void	replicator2_Two();
void	replicator2_Three();
void	replicator2_Four();
void	replicator2_Five();
void	replicator2_Six();
void	replicator2_Seven();
void	replicator2_Eight();
void	replicator2_Nine();
void	replicator2_Zero();
void	replicator2_Ten();
void	replicator2_Eleven();
void	replicator2_Twelve();
void	replicator2_Thirteen();
void	replicator2_Fourteen();
void	replicator2_Fifteen();
void	replicator2_pickup(entity ePlayer);

void replicator1_pickup(entity ePlayer)
{
//exit when replica is not ready
	if(!float_pickup1)
	{
	//exit this function now
		return;	
	}
//mark replica as unready
	float_pickup1=0;
	
//do not give an item to the player if the replica is gone
	if(!doesEntityExist($FakeReplicate1))
	{
	//exit this function now
		return;
	}

//create internal variables, used only inside thie function
	vector	vOrigin;
	
	if(globalCoop_check_existingLivingEntity(ePlayer))
	{
	//if the object exist
		if(doesEntityExist($FakeReplicate1))
		{
		//remove the fake replicate
			$FakeReplicate1.remove();
		}
	//grab the location of the player
		vOrigin = ePlayer.getOrigin();
	//spawn the entity, at the players location, so he picks it automatically up
		spawn(string_class_item1,"model",string_model_item1,"targetname","RealReplicate1","origin",vectorToString(vOrigin),"scale","0.01");
	//wait a moment
		wait(.1);
	//if it exists
		if(doesEntityExist($RealReplicate1))
		{
		//remove the object again
			$RealReplicate1.remove();
		}
	}
}

void replicator1()
//this function is started once the trigger is used
{
//set default, so it spawns at last something
	string_class_item1 = "";
	string_model_item1 = "";
}

void replicator1_One()
//this function is called when option 1 is used
{
//chek if the replicator1 is allready replicating
	if(float_replicating1)
	{
	//exit function
		return;
	}
//scale, the model down, so it fits inside the replicator1
	float_scale_item1 = .35;
//change the z axis, so it is alinged correctly
	float_offset_item1 = 0;
//set class name
	string_class_item1 = "health";
//set the model
	string_model_item1 = "item/health_large-hypospray.tik";
}

void replicator1_Two()
//this function is called when option 2 is used
{
//chek if the replicator1 is allready replicating
	if(float_replicating1)
	{
	//exit function
		return;
	}
//scale, the model down, so it fits inside the replicator1
	float_scale_item1 = .35;
//change the z axis, so it is alinged correctly
	float_offset_item1 = -8;
//set class name
	string_class_item1 = "BasicArmor";
//set the model
	string_model_item1 = "item/armor_large_shield.tik";
}

void replicator1_Three()
//this function is called when option 3 is used
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator1 is allready replicating
	if(float_replicating1)
	{
	//exit function
		return;
	}
	if(!float_headmasterPuzzleIsSolved)
	{
		mom_showMessagePlayer(ePlayer,"Security clearance insufficient...");
		return;
	}
//scale, the model down, so it fits inside the replicator1
	float_scale_item1 = 1;
//change the z axis, so it is alinged correctly
	float_offset_item1 = 0;
//set class name
	string_class_item1 = "weapon";
//set the model
	string_model_item1 = "weapons/worldmodel-phaser-STX.tik";
}

void replicator1_Four()
//this function is called when option 4 is used
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator1 is allready replicating
	if(float_replicating1)
	{
	//exit function
		return;
	}
	if(!float_headmasterPuzzleIsSolved)
	{
		mom_showMessagePlayer(ePlayer,"Security clearance insufficient...");
		return;
	}
//scale, the model down, so it fits inside the replicator1
	float_scale_item1 = 0.5;
//change the z axis, so it is alinged correctly
	float_offset_item1 = 0;
//set class name
	string_class_item1 = "weapon";
//set the model
	string_model_item1 = "weapons/worldmodel-compressionrifle.tik";
}

void replicator1_Five()
//this function is called when option 5 is used
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator1 is allready replicating
	if(float_replicating1)
	{
	//exit function
		return;
	}
	if(!float_headmasterPuzzleIsSolved)
	{
		mom_showMessagePlayer(ePlayer,"Security clearance insufficient...");
		return;
	}
//scale, the model down, so it fits inside the replicator1
	float_scale_item1 = 0.5;
//change the z axis, so it is alinged correctly
	float_offset_item1 = 6;
//set class name
	string_class_item1 = "weapon";
//set the model
	string_model_item1 = "weapons/worldmodel-sniperrifle.tik";
}

void replicator1_Six()
//this function is called when option 6 is used
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator1 is allready replicating
	if(float_replicating1)
	{
	//exit function
		return;
	}
	if(!float_headmasterPuzzleIsSolved)
	{
		mom_showMessagePlayer(ePlayer,"Security clearance insufficient...");
		return;
	}
//scale, the model down, so it fits inside the replicator1
	float_scale_item1 = 0.4;
//change the z axis, so it is alinged correctly
	float_offset_item1 = 0;
//set class name
	string_class_item1 = "weapon";
//set the model
	string_model_item1 = "weapons/worldmodel-photon.tik";
}

void replicator1_Seven()
//this function is called when option 7 is used
{
}

void replicator1_Eight()
//this function is called when option 8 is used
{
}

void replicator1_Nine()
//this function is called when option 9 is used
{
}

//this function is called when option 10 is used
void replicator1_Zero()
{
}

void replicator1_Ten()
{
}

void replicator1_Eleven()
{
}

void replicator1_Twelve()
{
}

void replicator1_Thirteen()
{
}

void replicator1_Fourteen()
//when player uses: "replicate"
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator1 is allready replicating
	if(float_replicating1)
	{
	//tell the player what is going on
		mom_showMessagePlayer(ePlayer,"Allreday replicating...");
	//exit function
		return;
	}
//mark replicator1 as in use
	float_replicating1=1;
	
//mark replica as unready
	float_pickup1=0;
	
//if the object exist
	if(doesEntityExist($FakeReplicate1))
	{
	//play replicating sound
		$FakeReplicate1.playsound("sound/ships/enterprise/ent_replicator.wav",3,2,64);
	//wait a moment
		wait(.5);
	//display replication effect
		$FakeReplicate1.displayEffect("TransportOut","FederationWeapons");
	//remove the fake replicate, before we spawn a new one
		$FakeReplicate1.fade(1,0);
	//wait a moment
		wait(1.5);
	//if the object exist
		if(doesEntityExist($FakeReplicate1))
		{
		//remove entity
			$FakeReplicate1.remove();		
		}
	}
//check if the player has selected a item
	else if(string_class_item1 == "")
	{
	//tell the player what is going on
		mom_showMessagePlayer(ePlayer,"You need to select an Item to replicate...");
	//UNmark replicator1 as in use
		float_replicating1=0;
	//exit the function now
		return;
	}

//create function internal variables
	entity	eFakeReplicate1;
	vector	vOrigin;
	
//get replicator1 spawn location
	vOrigin = '3050 1321 -40';//3058 1321 -40
	
//change Z offset, so the item is loacted properly
	vOrigin_z += float_offset_item1;
	
//spawn the entity, at the players location, so he picks it automatically up
	eFakeReplicate1 = spawn("script_model","model",string_model_item1,"origin",vectorToString(vOrigin),"scale","0","targetname","FakeReplicate1");
	
//wait for the item to spwan, and become available
	wait(0.02);
	
//make invisible, so it can be faded in
	eFakeReplicate1.forceAlpha(1);
	eFakeReplicate1.alpha(0);
	
//make phaser not fire
	if(eFakeReplicate1.getModelName() == "models/weapons/worldmodel-phaser-STX.tik")
	{
		eFakeReplicate1.anim("idle");
	}
	
//no targeting info
	eFakeReplicate1.contents( "nottargetable" );

//check if the replicated object still exists
	if(doesEntityExist(eFakeReplicate1))
	{
	//play replicating sound
		eFakeReplicate1.playsound("sound/ships/enterprise/ent_replicator.wav",3,2,64);
	//wait a moment
		wait(.5);
	//scale object to wanted size
		eFakeReplicate1.scale(float_scale_item1);
	//fade object in
		eFakeReplicate1.fadein(2.5,1);
	//display replication effect
		eFakeReplicate1.displayEffect("TransportIn","FederationWeapons");
	//wait a moment
		wait(1.8);	
	//mark replica as ready
		float_pickup1=1;
	}
//UNmark replicator1 as in use
	float_replicating1=0;
}

void replicator1_Fifteen()
//when player clicks on "pickup/use"
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator1 is allready replicating
	if(float_replicating1)
	{
	//tell the player what is going on
		thread mom_showMessagePlayer(ePlayer,"Please wait...");
	//exit function
		return;
	}
//chek if the replicator1 has not yet replicated something
	if(!doesEntityExist($FakeReplicate1))
	{
	//tell the player what is going on
		thread mom_showMessagePlayer(ePlayer,"First you need to replicate something...");
	//exit function
		return;
	}
//check for these models, they can not be picked up
/* 	if(	$FakeReplicate1.getModelName() == "models/enviro/academy_desk_cup1.tik" ||
		$FakeReplicate1.getModelName() == "models/enviro/klingon_food2.tik" )
	{
	//remove the object, don't bother with putting it into the players hands
		if(doesEntityExist($FakeReplicate1))
		{
			$FakeReplicate1.remove();
		}
	//exit function
		return;
	} */
//give the item to the player
	replicator1_pickup(ePlayer);	
}


void replicator2_pickup(entity ePlayer)
{
//exit when replica is not ready
	if(!float_pickup2)
	{
	//exit this function now
		return;	
	}
//mark replica as unready
	float_pickup2=0;
	
//do not give an item to the player if the replica is gone
	if(!doesEntityExist($FakeReplicate2))
	{
	//exit this function now
		return;
	}

//create internal variables, used only inside thie function
	vector	vOrigin;
	
	if(globalCoop_check_existingLivingEntity(ePlayer))
	{
	//if the object exist
		if(doesEntityExist($FakeReplicate2))
		{
		//remove the fake replicate
			$FakeReplicate2.remove();
		}
	//grab the location of the player
		vOrigin = ePlayer.getOrigin();
	//spawn the entity, at the players location, so he picks it automatically up
		spawn(string_class_item2,"model",string_model_item2,"targetname","RealReplicate2","origin",vectorToString(vOrigin),"scale","0.01");
	//wait a moment
		wait(.1);
	//if it exists
		if(doesEntityExist($RealReplicate2))
		{
		//remove the object again
			$RealReplicate2.remove();
		}
	}
}

void replicator2()
//this function is started once the trigger is used
{
//set default, so it spawns at last something
	string_class_item2 = "";
	string_model_item2 = "";
}

void replicator2_One()
//this function is called when option 1 is used
{
//chek if the replicator2 is allready replicating
	if(float_replicating2)
	{
	//exit function
		return;
	}
//scale, the model down, so it fits inside the replicator2
	float_scale_item2 = .35;
//change the z axis, so it is alinged correctly
	float_offset_item2 = 0;
//set class name
	string_class_item2 = "health";
//set the model
	string_model_item2 = "item/health_large-hypospray.tik";
}

void replicator2_Two()
//this function is called when option 2 is used
{
//chek if the replicator2 is allready replicating
	if(float_replicating2)
	{
	//exit function
		return;
	}
//scale, the model down, so it fits inside the replicator2
	float_scale_item2 = .35;
//change the z axis, so it is alinged correctly
	float_offset_item2 = -8;
//set class name
	string_class_item2 = "BasicArmor";
//set the model
	string_model_item2 = "item/armor_large_shield.tik";
}

void replicator2_Three()
//this function is called when option 3 is used
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator2 is allready replicating
	if(float_replicating2)
	{
	//exit function
		return;
	}
	if(!float_headmasterPuzzleIsSolved)
	{
		mom_showMessagePlayer(ePlayer,"Security clearance insufficient...");
		return;
	}
//scale, the model down, so it fits inside the replicator2
	float_scale_item2 = 1;
//change the z axis, so it is alinged correctly
	float_offset_item2 = 0;
//set class name
	string_class_item2 = "weapon";
//set the model
	string_model_item2 = "weapons/worldmodel-phaser-STX.tik";
}

void replicator2_Four()
//this function is called when option 4 is used
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator2 is allready replicating
	if(float_replicating2)
	{
	//exit function
		return;
	}
	if(!float_headmasterPuzzleIsSolved)
	{
		mom_showMessagePlayer(ePlayer,"Security clearance insufficient...");
		return;
	}
//scale, the model down, so it fits inside the replicator2
	float_scale_item2 = 0.5;
//change the z axis, so it is alinged correctly
	float_offset_item2 = 0;
//set class name
	string_class_item2 = "weapon";
//set the model
	string_model_item2 = "weapons/worldmodel-compressionrifle.tik";
}

void replicator2_Five()
//this function is called when option 5 is used
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator2 is allready replicating
	if(float_replicating2)
	{
	//exit function
		return;
	}
	if(!float_headmasterPuzzleIsSolved)
	{
		mom_showMessagePlayer(ePlayer,"Security clearance insufficient...");
		return;
	}
//scale, the model down, so it fits inside the replicator2
	float_scale_item2 = 0.5;
//change the z axis, so it is alinged correctly
	float_offset_item2 = 6;
//set class name
	string_class_item2 = "weapon";
//set the model
	string_model_item2 = "weapons/worldmodel-sniperrifle.tik";
}

void replicator2_Six()
//this function is called when option 6 is used
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator2 is allready replicating
	if(float_replicating2)
	{
	//exit function
		return;
	}
	if(!float_headmasterPuzzleIsSolved)
	{
		mom_showMessagePlayer(ePlayer,"Security clearance insufficient...");
		return;
	}
//scale, the model down, so it fits inside the replicator2
	float_scale_item2 = 0.4;
//change the z axis, so it is alinged correctly
	float_offset_item2 = 0;
//set class name
	string_class_item2 = "weapon";
//set the model
	string_model_item2 = "weapons/worldmodel-photon.tik";
}

void replicator2_Seven()
//this function is called when option 7 is used
{
}

void replicator2_Eight()
//this function is called when option 8 is used
{
}

void replicator2_Nine()
//this function is called when option 9 is used
{
}

//this function is called when option 10 is used
void replicator2_Zero()
{
}

void replicator2_Ten()
{
}

void replicator2_Eleven()
{
}

void replicator2_Twelve()
{
}

void replicator2_Thirteen()
{
}

void replicator2_Fourteen()
//when player uses: "replicate"
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator2 is allready replicating
	if(float_replicating2)
	{
	//tell the player what is going on
		mom_showMessagePlayer(ePlayer,"Allreday replicating...");
	//exit function
		return;
	}
//mark replicator2 as in use
	float_replicating2=1;
	
//mark replica as unready
	float_pickup2=0;
	
//if the object exist
	if(doesEntityExist($FakeReplicate2))
	{
	//play replicating sound
		$FakeReplicate2.playsound("sound/ships/enterprise/ent_replicator.wav",3,2,64);
	//wait a moment
		wait(.5);
	//display replication effect
		$FakeReplicate2.displayEffect("TransportOut","FederationWeapons");
	//remove the fake replicate, before we spawn a new one
		$FakeReplicate2.fade(1,0);
	//wait a moment
		wait(1.5);
	//if the object exist
		if(doesEntityExist($FakeReplicate2))
		{
		//remove entity
			$FakeReplicate2.remove();		
		}
	}
//check if the player has selected a item
	else if(string_class_item2 == "")
	{
	//tell the player what is going on
		mom_showMessagePlayer(ePlayer,"You need to select an Item to replicate...");
	//UNmark replicator2 as in use
		float_replicating2=0;
	//exit the function now
		return;
	}

//create function internal variables
	entity	eFakeReplicate2;
	vector	vOrigin;
	
//get replicator2 spawn location
	vOrigin = '3149 1321 -40';//3157 1321 -40
	
//change Z offset, so the item is loacted properly
	vOrigin_z += float_offset_item2;
	
//spawn the entity, at the players location, so he picks it automatically up
	eFakeReplicate2 = spawn("script_model","model",string_model_item2,"origin",vectorToString(vOrigin),"scale","0","targetname","FakeReplicate2");
	
//wait for the item to spwan, and become available
	wait(0.02);
	
//make invisible, so it can be faded in
	eFakeReplicate2.forceAlpha(1);
	eFakeReplicate2.alpha(0);
	
//make phaser not fire
	if(eFakeReplicate2.getModelName() == "models/weapons/worldmodel-phaser-STX.tik")
	{
		eFakeReplicate2.anim("idle");
	}
	
//no targeting info
	eFakeReplicate2.contents( "nottargetable" );

//check if the replicated object still exists
	if(doesEntityExist(eFakeReplicate2))
	{
	//play replicating sound
		eFakeReplicate2.playsound("sound/ships/enterprise/ent_replicator.wav",3,2,64);
	//wait a moment
		wait(.5);
	//scale object to wanted size
		eFakeReplicate2.scale(float_scale_item2);
	//fade object in
		eFakeReplicate2.fadein(2.5,1);
	//display replication effect
		eFakeReplicate2.displayEffect("TransportIn","FederationWeapons");
	//wait a moment
		wait(1.8);	
	//mark replica as ready
		float_pickup2=1;
	}
//UNmark replicator2 as in use
	float_replicating2=0;
}

void replicator2_Fifteen()
//when player clicks on "pickup/use"
{
	entity ePlayer;
	ePlayer = mom_returnPlayerForTrigger(getCurrentEntity());
//chek if the replicator2 is allready replicating
	if(float_replicating2)
	{
	//tell the player what is going on
		thread mom_showMessagePlayer(ePlayer,"Please wait...");
	//exit function
		return;
	}
//chek if the replicator2 has not yet replicated something
	if(!doesEntityExist($FakeReplicate2))
	{
	//tell the player what is going on
		thread mom_showMessagePlayer(ePlayer,"First you need to replicate something...");
	//exit function
		return;
	}
//check for these models, they can not be picked up
/* 	if(	$FakeReplicate2.getModelName() == "models/enviro/academy_desk_cup1.tik" ||
		$FakeReplicate2.getModelName() == "models/enviro/klingon_food2.tik" )
	{
	//remove the object, don't bother with putting it into the players hands
		if(doesEntityExist($FakeReplicate2))
		{
			$FakeReplicate2.remove();
		}
	//exit function
		return;
	} */
//give the item to the player
	replicator2_pickup(ePlayer);	
}




