//--------------------------------------------------------------------------------------
//
//  EF2 Global Level Script File
//
//	Dependancies:
//	#include "maps/global_scripts/global_common.scr"
//
//  Function:
//	Loads out the player in terms of weapons, ammo, and viewmodes depending upon if the
//	player typed the map command, or if they're playing through the single player game
//
//	How To Use:
//	After the waitForPlayer, in the level script, call the AssignWeapons function,
//	passing the level's map name as a string.  The key to this is the '-' dash in the
//	middle of the map name must be changed to an '_' underscore.  For example,
//	'm1l1a-borg_sphere' needs to be changed to 'm1l1a_borg_sphere'
//
//	External Functions:
//	globalLoadout_AssignWeapons( strLevelName )
//	strLevelName - String, pass a string into this function that is the converted map
//				   name as mentioned above
//
//	Script By:    Benson R
//  Created on:   9/17/2002
//
//  Last Edited:  Chris S
//
//--------------------------------------------------------------------------------------


//====================================================================================================================================================
//====================================================================================================================================================
//  DEFINE SCRIPT
//====================================================================================================================================================
//====================================================================================================================================================

//--- loadout functions
void globalLoadout_AssignWeapons( string strLevelName );

//--- intra functions
float globalLoadout_CheckForGame();
void globalLoadout_SecretWeapon();
void globalLoadout_GiveWeapon( string strTiki );
void globalLoadout_TakeWeapon( string strTiki );
void globalLoadout_GiveArmor( float fltAmount );
void globalLoadout_GiveAmmo( string strAmmo, float fltAmount );
void globalLoadout_GiveViewmode( string strViewMode );
void globalLoadout_TakeViewmode( string strViewMode );
void globalLoadout_ClearAllViewmode();


//-----------------------------------------------------------
//-----------------------------------------------------------
//--- CONSTANTS

//--- weapons list and tiki reference
string WEAPON_PHASER_VOY = "models/weapons/worldmodel-phaser.tik";
string WEAPON_PHASER_STX = "models/weapons/worldmodel-phaser-STX.tik";
string WEAPON_COMPRESSION_RIFLE = "models/weapons/worldmodel-compressionrifle.tik";
string WEAPON_ASSAULT_SHOTGUN = "models/weapons/worldmodel-fieldassaultrifle.tik";
string WEAPON_BURST_RIFLE = "models/weapons/worldmodel-burstrifle.tik";
string WEAPON_IMOD = "models/weapons/worldmodel-IMod.tik";
string WEAPON_ATTREXIAN_LIGHTNING = "models/weapons/worldmodel-attrex-rifle.tik";
string WEAPON_GRENADE_LAUNCHER = "models/weapons/worldmodel-grenadelauncher.tik";
string WEAPON_SNIPER_RIFLE = "models/weapons/worldmodel-sniperrifle.tik";
string WEAPON_IDRYLL_STAFF = "models/weapons/worldmodel-drull-staff.tik";
string WEAPON_TETRYON_GATLING = "models/weapons/worldmodel-tetryon.tik";
string WEAPON_ROMULAN_DISRUPTOR = "models/weapons/worldmodel-rom-disruptor.tik";
string WEAPON_ROMULAN_DISRUPTOR_ROMHANDS = "models/weapons/worldmodel-rom-disruptor-romhands.tik";

string WEAPON_ROMULAN_EXPERIMENTAL = "models/weapons/worldmodel-rom-radgun.tik";
string WEAPON_ROMULAN_EXPERIMENTAL_ROMHANDS = "models/weapons/worldmodel-rom-radgun-romhands.tik";

string WEAPON_PHOTON_BURST= "models/weapons/worldmodel-photon.tik";
string WEAPON_BATLETH = "models/weapons/worldmodel-batleth.tik";
string WEAPON_TRICORDER_VOY = "models/weapons/worldmodel-tricorder.tik";
string WEAPON_TRICORDER_STX = "models/weapons/worldmodel-tricorder-STX.tik";
string WEAPON_ROMULAN_CREDENTIALS = "models/weapons/worldmodel-rom-datapad.tik";
string WEAPON_NONE = "";

//--- armor
float ARMOR_LARGE = 150;
float ARMOR_MEDIUM = 100;
float ARMOR_SMALL = 50;

//--- ammo types
string AMMO_PLASMA = "Plasma";
string AMMO_PHASER = "Phaser";
string AMMO_DISRUPTOR = "Disruptor";
string AMMO_IDRYLL = "Idryll";
string AMMO_FED = "Fed";

//--- view modes
string VIEWMODE_TRACE_GAS = "tracegas";
string VIEWMODE_STRUCTURAL_INTEGRITY = "structuralintegrity";
string VIEWMODE_SEE_CLOAKED = "phaseshift";
string VIEWMODE_NIGHT_VISION = "nightvision";
string VIEWMODE_AIR_STRIKE = "torpedostrike";
string VIEWMODE_DETECT_ENEMY = "enemydetect";
string VIEWMODE_TRIPWIRE = "tripwire";
string VIEWMODE_FORCE_VISIBLE = "forcevisible";
string VIEWMODE_NONE = "none";




//====================================================================================================================================================
//====================================================================================================================================================
//  LOADOUT FUNCTIONS
//====================================================================================================================================================
//====================================================================================================================================================

void globalLoadout_DelayedAssignWeapons( string strLevelName )
{
	string s;
	waitForPlayer();
	wait( 0.05 );
	//--- had to make users pass the map name converted
	//stuffcmd( "script thread globalLoadout_" + strLevelName + "\n" );
	s = "globalLoadout_" + strLevelName;
	runThreadNamed( s );
}

//---------------------
// globalLoadout_AssignWeapons
// strLevelName - string, the actual map name, with the dash converted to an underscore
// master function to call the levels loadout function
//---------------------
void globalLoadout_AssignWeapons( string strLevelName )
{
	//Original method, scripting language can't handle
	//stuffcmd( "script thread globalLoadout_" + getcvar( "mapname" ) + "\n" );

	// spawn a thread that pauses, but let this return immediately
	thread globalLoadout_DelayedAssignWeapons( strLevelName );
}




//====================================================================================================================================================
//====================================================================================================================================================
//  INTRA FUNCTIONS
//====================================================================================================================================================
//====================================================================================================================================================

//---------------------
// globalLoadout_CheckForGame
// checks the game variable 'game.playerHasStarted' to tell
// the script if the player performed a map command
// returns the value of the game variable, which is TRUE or FALSE
//---------------------
float globalLoadout_CheckForGame()
{
	return( getFloatVar( "game.playerHasStarted" ) );
}


//---------------------
// globalLoadout_SecretWeapon
// strTiki - string, the path to the worldmodel tiki to give to the player
// checks to see if the player has picked up the passed in weapon against
// it's game variable, if he has it gives it to him
//---------------------
void globalLoadout_SecretWeapon()
{
	//--- check the game variables and give the weapons
	if( getFloatVar( "game.secretWeapon_CompressionRifle" ) == TRUE )		//compression rifle
	{
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
	}

	if( getFloatVar( "game.secretWeapon_IMOD" ) == TRUE )					//IMOD
	{
		globalLoadout_GiveWeapon( WEAPON_IMOD );
	}

	if( getFloatVar( "game.secretWeapon_IdryllStaff" ) == TRUE )			//Idryll Staff
	{
		globalLoadout_GiveWeapon( WEAPON_IDRYLL_STAFF );
	}

	if( getFloatVar( "game.secretWeapon_RomulanExperimental" ) == TRUE )	//Romulan Rad Weapon
	{
		globalLoadout_GiveWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
	}
}

//---------------------
// globalLoadout_GiveWeapon
// strTiki - string, the path to the worldmodel tiki to give to the player
// takes the passed in worldmodel tiki reference and gives it to the player
//---------------------
void globalLoadout_GiveWeapon( string strTiki )
{
	if( strTiki != "" )
	{
		//print( "GIVING PLAYER: " + strTiki + "\n" );
		$player.give( strTiki );
	}
}


//---------------------
// globalLoadout_TakeWeapon
// strTiki - string, the path to the worldmodel tiki to take from the player
// takes the passed in worldmodel tiki reference from the player
//---------------------
void globalLoadout_TakeWeapon( string strTiki )
{
	if( strTiki != "" )
	{
		$player.take( strTiki );
	}
}


//---------------------
// globalLoadout_GiveArmor
// strTiki - string, the path to the armor tiki to give to the player
// takes the passed in armor tiki reference and gives it to the player
//---------------------
void globalLoadout_GiveArmor( float fltAmount )
{
	$player.armor( "BasicArmor", fltAmount );
}


//---------------------
// globalLoadout_GiveAmmo
// strAmmo - string, the ammo type to give to the player
// fltAmount - float, the amount of the specified type
// takes the passed in worldmodel tiki reference from the player
//---------------------
void globalLoadout_GiveAmmo( string strAmmo, float fltAmount )
{
	$player.ammo( strAmmo, fltAmount );
}


//---------------------
// globalLoadout_GiveViewmode
// strViewMode - string, the viewmode to give to the player
// assigns a viewmode to the player for him to use
//---------------------
void globalLoadout_GiveViewmode( string strViewMode )
{
	$world.addAvailableViewMode( strViewMode );
}


//---------------------
// globalLoadout_TakeViewmode
// strViewMode - string, the viewmode to take away from the player
// removes an assigned viewmode from the player
//---------------------
void globalLoadout_TakeViewmode( string strViewMode )
{
	$world.removeAvailableViewMode( strViewMode );
}


//---------------------
// globalLoadout_GiveViewmode
// clears all assigned viewmodes, thus making all available to the player
//---------------------
void globalLoadout_ClearAllViewmode()
{
	$world.clearAvailableViewModes();
}


//====================================================================================================================================================
//====================================================================================================================================================
//  LEVEL LOADOUT FUNCTIONS
//====================================================================================================================================================
//====================================================================================================================================================

//====================================================================================================================================================
//  IGM LOADOUT
//====================================================================================================================================================

//---------------------
// igm
//---------------------
void globalLoadout_igm()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_TakeWeapon( WEAPON_PHASER_VOY );
		globalLoadout_TakeWeapon( WEAPON_PHASER_STX );
		globalLoadout_TakeWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_TakeWeapon( WEAPON_IMOD );
		globalLoadout_TakeWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_TakeWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_TakeWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_IDRYLL_STAFF );
		globalLoadout_TakeWeapon( WEAPON_TETRYON_GATLING );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_DISRUPTOR );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_DISRUPTOR_ROMHANDS );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_EXPERIMENTAL_ROMHANDS );
		globalLoadout_TakeWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_TakeWeapon( WEAPON_BATLETH );
		globalLoadout_TakeWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_TakeWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_CREDENTIALS );
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_TakeViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_TakeViewmode( VIEWMODE_SEE_CLOAKED );
		globalLoadout_TakeViewmode( VIEWMODE_AIR_STRIKE );
		globalLoadout_TakeViewmode( VIEWMODE_DETECT_ENEMY );
		globalLoadout_TakeViewmode( VIEWMODE_TRIPWIRE );
		globalLoadout_TakeViewmode( VIEWMODE_FORCE_VISIBLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_TakeWeapon( WEAPON_PHASER_VOY );
		globalLoadout_TakeWeapon( WEAPON_PHASER_STX );
		globalLoadout_TakeWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_TakeWeapon( WEAPON_IMOD );
		globalLoadout_TakeWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_TakeWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_TakeWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_IDRYLL_STAFF );
		globalLoadout_TakeWeapon( WEAPON_TETRYON_GATLING );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_DISRUPTOR );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_DISRUPTOR_ROMHANDS );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_EXPERIMENTAL_ROMHANDS );
		globalLoadout_TakeWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_TakeWeapon( WEAPON_BATLETH );
		globalLoadout_TakeWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_TakeWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_TakeWeapon( WEAPON_ROMULAN_CREDENTIALS );
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_TakeViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_TakeViewmode( VIEWMODE_SEE_CLOAKED );
		globalLoadout_TakeViewmode( VIEWMODE_AIR_STRIKE );
		globalLoadout_TakeViewmode( VIEWMODE_DETECT_ENEMY );
		globalLoadout_TakeViewmode( VIEWMODE_TRIPWIRE );
		globalLoadout_TakeViewmode( VIEWMODE_FORCE_VISIBLE );
	}
}


//====================================================================================================================================================
//  MISSION 1 - BORG SPHERE
//====================================================================================================================================================

//---------------------
// m1l1a-borg_sphere
//---------------------
void globalLoadout_m1l1a_borg_sphere()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m1l1b-borg_sphere
//---------------------
void globalLoadout_m1l1b_borg_sphere()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m1l1c-borg_sphere
//---------------------
void globalLoadout_m1l1c_borg_sphere()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m1l2a-borg_sphere
//---------------------
void globalLoadout_m1l2a_borg_sphere()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m1l2b-borg_sphere
//---------------------
void globalLoadout_m1l2b_borg_sphere()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m1l2c-borg_sphere
//---------------------
void globalLoadout_m1l2c_borg_sphere()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}


//---------------------
// m1l3-borg_boss
//---------------------
void globalLoadout_m1l3_borg_boss()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}




//====================================================================================================================================================
//  MISSION 2 - STAR FLEET ACADEMY
//====================================================================================================================================================

//---------------------
// m2l1-sfa
//---------------------
void globalLoadout_m2l1_sfa()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_TakeWeapon( WEAPON_PHASER_VOY );
		globalLoadout_TakeWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_TakeWeapon( WEAPON_PHASER_VOY );
		globalLoadout_TakeWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m2l2-sfa
//---------------------
void globalLoadout_m2l2_sfa()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_TakeWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveAmmo( AMMO_PLASMA, 150 );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_TakeWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveAmmo( AMMO_PLASMA, 150 );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m2l3-sfa
//---------------------
void globalLoadout_m2l3_sfa()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_TakeWeapon( WEAPON_PHASER_STX );
		globalLoadout_TakeWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_BATLETH );
		globalLoadout_TakeWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}


//====================================================================================================================================================
//  MISSION 3 - DALLAS
//====================================================================================================================================================

//---------------------
// m3l1a-forever
//---------------------
void globalLoadout_m3l1a_forever()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		//globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m3l1b-forever
//---------------------
void globalLoadout_m3l1b_forever()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		//globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m3l2-forever
//---------------------
void globalLoadout_m3l2_forever()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		//globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//====================================================================================================================================================
//  MISSION 4 - ATTREXIAN STATION
//====================================================================================================================================================

//---------------------
// m4l1a-attrexian_station
//---------------------
void globalLoadout_m4l1a_attrexian_station()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		//globalLoadout_GiveAmmo( AMMO_PLASMA, 100 );

	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		//globalLoadout_GiveAmmo( AMMO_PLASMA, 100 );
	}
}

//---------------------
// m4l1b-attrexian_station
//---------------------
void globalLoadout_m4l1b_attrexian_station()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m4l2a-attrexian_station
//---------------------
void globalLoadout_m4l2a_attrexian_station()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m4l2b-attrexian_station
//---------------------
void globalLoadout_m4l2b_attrexian_station()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}


//====================================================================================================================================================
//  MISSION 5 - DRULL RUINS 1
//====================================================================================================================================================

//---------------------
// m5l1a-drull_ruins1
//---------------------
void globalLoadout_m5l1a_drull_ruins1()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
}

//---------------------
// m5l1b-drull_ruins1
//---------------------
void globalLoadout_m5l1b_drull_ruins1()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
}

//---------------------
// m5l1c-drull_ruins1
//---------------------
void globalLoadout_m5l1c_drull_ruins1()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
}

//---------------------
// m5l2a-drull_ruins1
//---------------------
void globalLoadout_m5l2a_drull_ruins1()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
}

//---------------------
// m5l2b-drull_ruins1
//---------------------
void globalLoadout_m5l2b_drull_ruins1()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
}

//---------------------
// m5l2c-drull_ruins1
//---------------------
void globalLoadout_m5l2c_drull_ruins1()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );

	}
}


//====================================================================================================================================================
//  MISSION 6 - ATTACK ON THE ENTERPRISE
//====================================================================================================================================================

//---------------------
// m6-deck8_redalert
//---------------------
void globalLoadout_m6_deck8_redalert()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );

	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m6-deck16_engineering
//---------------------
void globalLoadout_m6_deck16_engineering()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		
		globalLoadout_TakeWeapon( WEAPON_GRENADE_LAUNCHER ); //<- [hzm singeplayer fix 1.00] chrissstrahl [take weapon as it does to much splash damage] - Original -> //
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		//<- [hzm singeplayer fix 1.00] chrissstrahl [don't give weapon as it does to much splash damage] - Original -> //globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m6-deck1_bridge_redalert
//---------------------
void globalLoadout_m6_deck1_bridge_redalert()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER ); //<- [hzm singeplayer fix 1.00] chrissstrahl [give back weapon it was previously taken] - Original -> //
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m6-exterior
//---------------------
void globalLoadout_m6_exterior()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_TakeWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_TakeWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_TakeWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_TakeWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}


//====================================================================================================================================================
//  MISSION 7 - ATTREXIAN COLONY
//====================================================================================================================================================

//---------------------
// m7l1a-attrexian_colony
//---------------------
void globalLoadout_m7l1a_attrexian_colony()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_TakeWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_TakeWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	    globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
	}
}

//---------------------
// m7l1b-attrexian_colony
//---------------------
void globalLoadout_m7l1b_attrexian_colony()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
}

//---------------------
// m7l2a-attrexian_colony
//---------------------
void globalLoadout_m7l2a_attrexian_colony()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
}

//---------------------
// m7l2b-attrexian_colony
//---------------------
void globalLoadout_m7l2b_attrexian_colony()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
}

//---------------------
// m7l2c-attrexian_colony
//---------------------
void globalLoadout_m7l2c_attrexian_colony()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
	}
}

//====================================================================================================================================================
//  MISSION 8 - DRULL RUINS 2
//====================================================================================================================================================

//---------------------
// m8l1a-drull_ruins2
//---------------------
void globalLoadout_m8l1a_drull_ruins2()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	    globalLoadout_GiveAmmo( AMMO_FED, 150 );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	    globalLoadout_GiveAmmo( AMMO_FED, 150 );
	}
}

//---------------------
// m8l1b-drull_ruins2
//---------------------
void globalLoadout_m8l1b_drull_ruins2()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m8l2a-drull_ruins2
//---------------------
void globalLoadout_m8l2a_drull_ruins2()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m8l2b-drull_ruins2
//---------------------
void globalLoadout_m8l2b_drull_ruins2()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}


//====================================================================================================================================================
//  MISSION 9 - KLINGON BASE
//====================================================================================================================================================

//---------------------
// m9l1a-klingon_base
//---------------------
void globalLoadout_m9l1a_klingon_base()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveAmmo( AMMO_FED, 200 );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m9l1b-klingon_base
//---------------------
void globalLoadout_m9l1b_klingon_base()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m9l2-klingon_base
//---------------------
void globalLoadout_m9l2_klingon_base()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}


//====================================================================================================================================================
//  MISSION 10 - ROMULAN INSTALLATION
//====================================================================================================================================================

//---------------------
// m10l1-romulan_installation
//---------------------
void globalLoadout_m10l1_romulan_installation()
{
	//--- give secret weapons
	//globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_TakeWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_TakeWeapon( WEAPON_IMOD );
		globalLoadout_TakeWeapon( WEAPON_IDRYLL_STAFF );
		globalLoadout_GiveWeapon( WEAPON_ROMULAN_CREDENTIALS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_ROMULAN_CREDENTIALS );
		globalLoadout_TakeWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_TakeWeapon( WEAPON_IMOD );
		globalLoadout_TakeWeapon( WEAPON_IDRYLL_STAFF );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m10l2a-romulan_installation
//---------------------
void globalLoadout_m10l2a_romulan_installation()
{
	//--- give secret weapons
	//globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_ROMULAN_DISRUPTOR_ROMHANDS );
		globalLoadout_GiveWeapon( WEAPON_ROMULAN_CREDENTIALS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}

//---------------------
// m10l2b-romulan_installation
//---------------------
void globalLoadout_m10l2b_romulan_installation()
{
	//--- give secret weapons
	//globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
    	globalLoadout_GiveWeapon( WEAPON_ROMULAN_DISRUPTOR_ROMHANDS );
		globalLoadout_GiveWeapon( WEAPON_ROMULAN_CREDENTIALS );
		globalLoadout_GiveViewmode ( VIEWMODE_TRIPWIRE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
}




//====================================================================================================================================================
//  MISSION 11 - DRULL RUINS 3
//====================================================================================================================================================

//---------------------
// m11l1a-drull_ruins3
//---------------------
void globalLoadout_m11l1a_drull_ruins3()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		wait ( .1 );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		//globalLoadout_GiveWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
		wait ( .1 );
		globalLoadout_GiveWeapon( WEAPON_TETRYON_GATLING );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		wait ( .1 );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_AIR_STRIKE );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		wait ( .1 );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		//globalLoadout_GiveWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
		wait ( .1 );
		globalLoadout_GiveWeapon( WEAPON_TETRYON_GATLING );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		wait ( .1 );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_AIR_STRIKE );
	}
}

//---------------------
// m11l1b-drull_ruins3
//---------------------
void globalLoadout_m11l1b_drull_ruins3()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveViewmode( VIEWMODE_AIR_STRIKE );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		//globalLoadout_GiveWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
		globalLoadout_GiveWeapon( WEAPON_TETRYON_GATLING );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
		globalLoadout_GiveViewmode( VIEWMODE_AIR_STRIKE );
	}
}

//---------------------
// m11l2a-drull_ruins3
//---------------------
void globalLoadout_m11l2a_drull_ruins3()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		//globalLoadout_GiveWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
		globalLoadout_GiveWeapon( WEAPON_TETRYON_GATLING );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
	}
}

//---------------------
// m11l3a-drull_ruins3
//---------------------
void globalLoadout_m11l3a_drull_ruins3()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		//globalLoadout_GiveWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
		globalLoadout_GiveWeapon( WEAPON_TETRYON_GATLING );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
	}
}

//---------------------
// m11l3b-drull_ruins3
//---------------------
void globalLoadout_m11l3b_drull_ruins3()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		globalLoadout_GiveWeapon( WEAPON_NONE );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
		//globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_ATTREXIAN_LIGHTNING );
		globalLoadout_GiveWeapon( WEAPON_GRENADE_LAUNCHER );
		//globalLoadout_GiveWeapon( WEAPON_ROMULAN_EXPERIMENTAL );
		globalLoadout_GiveWeapon( WEAPON_TETRYON_GATLING );
		globalLoadout_GiveWeapon( WEAPON_PHOTON_BURST );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
		globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
	}
}

//----------------------
// zoo1
//----------------------
void globalLoadout_zoo1()
{
    globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
    //globalLoadout_GiveWeapon( WEAPON_ROMULAN_CREDENTIALS );
    //globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
    //globalLoadout_GiveWeapon( WEAPON_SNIPER_RIFLE );
    //globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
    //globalLoadout_GiveWeapon( WEAPON_BURST_RIFLE );
    //globalLoadout_GiveWeapon( WEAPON_TETRYON_GATLING );
}


//----------------------
//training
//----------------------
void globalLoadout_training()
{
    globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );

}

//====================================================================================================================================================
//  TEST WEAPON LOADOUT LEVELS
//====================================================================================================================================================

//---------------------
// testWeapon_GameStart
//---------------------
void globalLoadout_testWeapon_GameStart()
{
	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		print( "testWeapon_GameStart: CHECK GAME, STARTED FROM BEGINING, SINGLE PLAYER LOADOUT GIVEN\n" );
		//globalLoadout_GiveWeapon( WEAPON_PHASER_VOY );
		//globalLoadout_GiveWeapon( WEAPON_COMPRESSION_RIFLE );
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		print( "CHECK GAME, USED MAP COMMAND, PRE CONFIGED LOADOUT GIVEN\n" );
	}
}

//---------------------
// testWeapon
//---------------------
void globalLoadout_testWeapon()
{
	//--- give secret weapons
	globalLoadout_SecretWeapon();

	//--- check for if the player is playing the game from the beginning
	//--- or if they typed a map command
	if( globalLoadout_CheckForGame() == TRUE )
	{
		//--- the player is playing from the beginning
		print( "CHECK GAME, STARTED FROM BEGINING, SINGLE PLAYER LOADOUT GIVEN\n" );
		//globalLoadout_TakeWeapon( WEAPON_PHASER_VOY );
		//globalLoadout_TakeWeapon( WEAPON_COMPRESSION_RIFLE );
		//globalLoadout_TakeWeapon( WEAPON_TRICORDER_VOY );
		globalLoadout_GiveArmor( ARMOR_MEDIUM );
		globalLoadout_GiveAmmo( AMMO_PLASMA, 200 );
		globalLoadout_GiveViewmode( VIEWMODE_TRACE_GAS );
		//globalLoadout_GiveViewmode( VIEWMODE_STRUCTURAL_INTEGRITY );
	}
	else
	{
		//--- the player used the map command
		print( "CHECK GAME, USED MAP COMMAND, PRE CONFIGED LOADOUT GIVEN\n" );
		globalLoadout_GiveWeapon( WEAPON_PHASER_STX );
		globalLoadout_GiveWeapon( WEAPON_ASSAULT_SHOTGUN );
		globalLoadout_GiveWeapon( WEAPON_TRICORDER_STX );
		globalLoadout_GiveWeapon( WEAPON_IMOD );
		globalLoadout_GiveArmor( ARMOR_SMALL );
		globalLoadout_GiveAmmo( AMMO_PLASMA, 500 );
	}
}